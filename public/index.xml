<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FRENCH MALWARE HUNTERS CORNER on pHReAK.IN</title>
    <link>/</link>
    <description>Recent content in FRENCH MALWARE HUNTERS CORNER on pHReAK.IN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Me</title>
      <link>/cv/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/cv/</guid>
      <description> My name is Eric (Aka nAPTaX), i&amp;rsquo;m a 48 years old üõπ SKATER, father of 4 and üßë‚Äçüåæ ETHICAL HACKER with a love for low level ‚ù§Ô∏è Reverse Engineering ‚ù§Ô∏è.
I co-founded several IT &amp;amp; Cloud companies for 20 years.
Security Domains Reverse Engineering Intel/ARM Malware Hunter Ethical Hacker Security Researcher Fuzzing Skills Debugger Ghidra IDA RADARE2 HOPPER Langages C C++ For Internal Windows Assembler x64 Python GO Frameworks i like pwntools Google oss-fuzz Cloud AWS Microsoft AZURE GOOGLE Gloud (GCP) J&amp;rsquo;aime ‚ù§Ô∏è Reverser des binaires et chercher des failles La litt√©rature La Cosmologie et la m√©canique Quantique Le journalisme d&amp;rsquo;investigation audio La photographie N&amp;amp;B N&amp;rsquo;appr√©cie pas trop üò† Les &amp;lsquo;usagers&amp;rsquo; de Ransomware Les script kiddies Le PHP ;-) Les Pentesters du dimanche &amp;hellip; Je suis en train d&amp;rsquo;apprendre Les ICS (Industrial Control System) La s√©curit√© des ICS SIEMENS TIA Portal (en hommage a STUXNET) </description>
    </item>
    
    <item>
      <title>Edito 0x000</title>
      <link>/edito/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/edito/</guid>
      <description>Voil√† nous sommes le 26 septembre 2022, et l‚Äôh√¥pital de Corbeil-Essonnes vient de voir 11 Go de ses donn√©es publi√©es suite √† sa cyber agression par un groupe de malfrats. Ce/ces cybercriminels ont finalement mis leurs menaces √† ex√©cution sur les donn√©es qu&amp;rsquo;ils avaient chiffr√©es ET d√©rob√©es 1 mois plus t√¥t. Des Hackers ? Pas du tout : des clients &amp;hellip; Oui des clients du Ransomware As A Service (RaaS) Lockbit : quelques Bitcoins pour pouvoir disposer d&amp;rsquo;une usine de Ransomware en mode SaaS.</description>
    </item>
    
    <item>
      <title>Edito 0x000</title>
      <link>/posts/2022-10-6-edito000/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022-10-6-edito000/</guid>
      <description>Voil√† nous sommes le 26 septembre 2022, et l‚Äôh√¥pital de Corbeil-Essonnes vient de voir 11 Go de ses donn√©es publi√©es suite √† sa cyber agression par un groupe de malfrats. Ce/ces cybercriminels ont finalement mis leurs menaces √† ex√©cution sur les donn√©es qu&amp;rsquo;ils avaient chiffr√©es ET d√©rob√©es 1 mois plus t√¥t. Des Hackers ? Pas du tout : des clients &amp;hellip; Oui des clients du Ransomware As A Service (RaaS) Lockbit : quelques Bitcoins pour pouvoir disposer d&amp;rsquo;une usine de Ransomware en mode SaaS.</description>
    </item>
    
    <item>
      <title>PROLOG 0x000, In Assembler we trust</title>
      <link>/posts/2022-10-6-prolog000/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022-10-6-prolog000/</guid>
      <description>Dans ce voyage au c≈ìur des fichiers binaires et du code ex√©cutable se trouve l&amp;rsquo;empereur de tous les langages informatique, la source premi√®re du dialogue avec nos CPU : l&amp;rsquo;assembleur.
Je ne vais pas produire ici sur ce blog des cours d&amp;rsquo;assembleur. Il en existe de nombreux et d&amp;rsquo;excellente facture sur internet. Je vais juste poser quelques rappels qui m&amp;rsquo;apparaissent essentiels pour la suite de notre voyage dans le Reverse Engineering des binaires.</description>
    </item>
    
    <item>
      <title>PROLOG 0x001, La m√©moire</title>
      <link>/posts/2022-10-6-prolog001/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022-10-6-prolog001/</guid>
      <description>Second billet de notre s√©rie PROLOG qui vise a faire quelques rapides rappels th√©oriques sur les bases afin de partir seinement dans le reverse enginering : aujourd&amp;rsquo;hui au programme, LA MEMOIRE.
Lorsque l&amp;rsquo;on souhaite se lancer dans le reverse engineering de binaires, on pense que l&amp;rsquo;assembleur est LA barri√®re d&amp;rsquo;entr√©e complexe. En r√©alit√©, l&amp;rsquo;assembleur est d&amp;rsquo;une syntaxe simplissime, d&amp;rsquo;une logique totale et donc d&amp;rsquo;un niveau de complexit√© tr√®s faible. Ce qui est complexe, vient d&amp;rsquo;une erreur de d√©part tres r√©pandue : commencer √† lire du code assembleur sans avoir, au pr√©alable, maitriser pleinement les 4 elements suivants :</description>
    </item>
    
    <item>
      <title>PROLOG 0x002, Les conventions d&#39;appels</title>
      <link>/posts/2022-10-6-prolog002/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022-10-6-prolog002/</guid>
      <description>Comme leur nom l&amp;rsquo;indique, les conventions d&amp;rsquo;appels d√©finissent des r√®gles communes en mati√®re de passage d&amp;rsquo;arguments et de valeurs retour vers et par une fonction. Bah oui me direz vous&amp;hellip; mais voil√†, la difficult√© c&amp;rsquo;est qu&amp;rsquo;il existe plusieurs de ces conventions. Par exemple, elles sont diff√©rentes entre un LINUX 64-bit et un WINDOWS 64-bit, et encore diff√©rentes entre un Linux 32-bits et un Linux 64-bits &amp;hellip;.
Comme il en existe beaucoup, nous allons nous limiter aux conventions d&amp;rsquo;appels sur processeurs Intel X86 (32-bits et 64 bits).</description>
    </item>
    
    <item>
      <title>PROLOG 0x003, Un premier Stack Buffer Overflow (simple)</title>
      <link>/posts/2022-10-6-prolog003/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022-10-6-prolog003/</guid>
      <description>Hello,
Comme vous avez soigneusement lu les 3 premiers billets de la s√©rie PROLOG (si cel√† n&amp;rsquo;est pas le cas, je vous invite vivement √† les lire avant celui-ci : Assembler(1), M√©moire(2), conventions d&amp;rsquo;appels(3)) est venu le temps de les mettre en application.
Et pour un premier excercice, la compr√©hension d&amp;rsquo;un Buffer Overflow est parfaite. A ce stade de la p√©dagogie, nous allons prendre un exemple fictif avec une simplicit√© que vous ne trouverez pas sur le th√©atre des op√©rations.</description>
    </item>
    
  </channel>
</rss>
