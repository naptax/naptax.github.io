<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FRENCH MALWARE HUNTERS CORNER on French Malware Analyst</title>
    <link>/</link>
    <description>Recent content in FRENCH MALWARE HUNTERS CORNER on French Malware Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 14 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GuLoader : Analyse | Part one | (French version)</title>
      <link>/posts/fr/2023-01-14-guloader-1/</link>
      <pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2023-01-14-guloader-1/</guid>
      <description>Hello,
Si vous avez suivi les diff√©rents billets de PROLOG de ce blog, alors le temps est venu de s&amp;rsquo;attaquer √† un bon client pour l&amp;rsquo;analyse de Malware, et surtout des techniques d&amp;rsquo;√©vasion et d&amp;rsquo;anti : le loader GULOADER. GuLOADER c &amp;rsquo;est un peu comme le boss de fin des techniques anti-*. En avant pour la Hard way
Cet article est inspir√© d&amp;rsquo;une session Twitch de l&amp;rsquo;excellent Sergei Frankoff aka @herrcore.</description>
    </item>
    
    <item>
      <title>[ -- Edito -- ] 0x000 - README.TXT | (French version)</title>
      <link>/posts/fr/2022-09-26-edito000/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2022-09-26-edito000/</guid>
      <description>Voil√†, nous sommes le 26 septembre 2022, et l‚Äôh√¥pital de Corbeil-Essonnes vient de voir 11 Go de ses donn√©es publi√©es suite √† sa cyber agression par un groupe de malfrats. Ce/ces cybercriminels ont finalement mis leurs menaces √† ex√©cution sur les donn√©es qu&amp;rsquo;ils avaient chiffr√©es ET d√©rob√©es 1 mois plus t√¥t. Des Hackers ? Pas du tout : des clients &amp;hellip; Oui des clients du Ransomware As A Service (RaaS) Lockbit : quelques Bitcoins pour pouvoir disposer d&amp;rsquo;une usine de Ransomware en mode SaaS.</description>
    </item>
    
    <item>
      <title>[ANTI-*] 0x000: Anti-Disassembly | Part one | (French version)</title>
      <link>/posts/fr/2022-12-16-offuscation/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2022-12-16-offuscation/</guid>
      <description>Hello,
Le temps est venu de s&amp;rsquo;attaquer √† un tr√®s gros morceau: les techniques d&amp;rsquo;Anti-Analyse. Et oui, les binaires sont des patients qui ne se laissent pas ausculter comme cela &amp;hellip; En effet, les √©diteurs commerciaux et les auteurs de malwares prot√®gent leur binaire en y injectant un ou plusieurs m√©canismes qui viennent complexifier et donc ralentir et diminuer le reverse de leur code,algo ou donn√©es. Ces techniques sont nombreuses et en perp√©tuelle √©volution (comme toute situation &amp;ldquo;Le chat et la souris&amp;rdquo; ;-)</description>
    </item>
    
    <item>
      <title>[CRYPTO] 0x001: RC4 (French version)</title>
      <link>/posts/fr/2022-12-02-rc4/</link>
      <pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2022-12-02-rc4/</guid>
      <description>Hello,
Les auteurs de Malware √©crivent le code de leur payload avec 3 pr√©occupations techniques principales:
Atteindre l&amp;rsquo;objectif malicieux (Chiffrer, Voler, Evader, D√©truire, Usurper) : c&amp;rsquo;est la raison d‚Äô√™tre de leur Payload Passer sous les radars des logiciels de s√©curit√© (ex: EDR, AV) en √©tant le plus discret et surtout atypique possible Rendre la tache des Malware Analysts la plus complexe possible (Anti-Debug tricks, cryptage, offuscation, &amp;hellip;) C&amp;rsquo;est pourquoi les malwares font une utilisation intensive de diff√©rents algo de chiffrement sym√©triques et asym√©triques.</description>
    </item>
    
    <item>
      <title>[PROLOG] 0x004, Local Shellcode par Stack Buffer OverFlow (Part 2) (French version) </title>
      <link>/posts/fr/2022-11-26-prolog004/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2022-11-26-prolog004/</guid>
      <description>Hello,
Toujours dans cette s√©rie de billets d&amp;rsquo;√©chauffement (s√©rie PROLOG), nous nous √©tions laiss√©s la derni√®re fois sur un billet expliquant ce qu&amp;rsquo;√©tait un BUFFER OVERFLOW (le billet est ici). Je vous propose maintenant de passer √† la pratique en obtenant un Shell par l&amp;rsquo;utilisation d&amp;rsquo;un STACK Buffer Overflow.
Toujours dans un souci de p√©dagogie, nous allons prendre un exemple simple :
Une erreur de programmation flagrante Un ex√©cutable ne disposant d&amp;rsquo;aucun moyen de protection de sa stack Un OS pour lequel nous aurions d√©sactiv√© l&amp;rsquo;ASLR qui le prot√®ge de ce type d&amp;rsquo;exploitation Une execution locale (et non remote) Un peu plus tard, nous verrons que ces moyens de protection, m√™me activ√©s, sont eux aussi &amp;lsquo;bypassable&amp;rsquo; &amp;hellip;</description>
    </item>
    
    <item>
      <title>[PROLOG] 0x003, Un premier Buffer Overflow (Part 1) | (French version)</title>
      <link>/posts/fr/2022-10-6-prolog003/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2022-10-6-prolog003/</guid>
      <description>Hello,
Comme vous avez soigneusement lu les 3 premiers billets de la s√©rie PROLOG (si cel√† n&amp;rsquo;est pas le cas, je vous invite vivement √† les lire avant celui-ci : Assembler(1), M√©moire(2), conventions d&amp;rsquo;appels(3)) est venu le temps de les mettre en application.
Et pour un premier exercice d&amp;rsquo;application, la compr√©hension d&amp;rsquo;un Buffer Overflow est parfaite. A ce stade de la p√©dagogie, nous allons prendre un exemple fictif avec une simplicit√© que vous ne trouverez pas sur le th√©atre des op√©rations.</description>
    </item>
    
    <item>
      <title>[PROLOG] 0x002, Les conventions d&#39;appels | (French version)</title>
      <link>/posts/fr/2022-11-11-prolog002/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2022-11-11-prolog002/</guid>
      <description>Comme leur nom l&amp;rsquo;indique, les conventions d&amp;rsquo;appels d√©finissent des r√®gles communes en mati√®re de passage d&amp;rsquo;arguments et de valeurs retour vers et par une fonction. Bah oui me direz vous&amp;hellip; mais voil√†, la difficult√© c&amp;rsquo;est qu&amp;rsquo;il existe plusieurs de ces conventions. Par exemple, elles sont diff√©rentes entre un LINUX 64-bit et un WINDOWS 64-bit, et encore diff√©rentes entre un Linux 32-bits et un Linux 64-bits &amp;hellip;.
Comme il en existe beaucoup, nous allons nous limiter aux conventions d&amp;rsquo;appels sur processeurs Intel X86 (32-bits et 64 bits).</description>
    </item>
    
    <item>
      <title>[PROLOG] 0x001, La m√©moire | (French version)</title>
      <link>/posts/fr/2022-11-01-prolog001/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2022-11-01-prolog001/</guid>
      <description>Second billet de notre s√©rie PROLOG qui vise a faire quelques rapides rappels th√©oriques sur les bases afin de partir sainement dans le reverse engineering : aujourd&amp;rsquo;hui au programme, LA M√âMOIRE.
Lorsque l&amp;rsquo;on souhaite se lancer dans le reverse engineering de binaires, on pense que l&amp;rsquo;assembleur est LA barri√®re d&amp;rsquo;entr√©e complexe. En r√©alit√©, l&amp;rsquo;assembleur est d&amp;rsquo;une syntaxe simplissime, d&amp;rsquo;une logique totale et donc d&amp;rsquo;un niveau de complexit√© tr√®s faible. Ce qui est complexe, vient d&amp;rsquo;une erreur de d√©part tr√®s r√©pandue : commencer √† lire du code assembleur sans avoir, au pr√©alable, maitriser pleinement les 4 √©l√©ments suivants :</description>
    </item>
    
    <item>
      <title>[PROLOG] 0x000, In Assembler we trust (French version)</title>
      <link>/posts/fr/2022-09-26-prolog000/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/fr/2022-09-26-prolog000/</guid>
      <description>Dans ce voyage au c≈ìur des fichiers binaires et du code ex√©cutable se trouve l&amp;rsquo;empereur de tous les langages informatique, la source premi√®re du dialogue avec nos CPU : l&amp;rsquo;assembleur.
Je ne vais pas produire ici sur ce blog des cours d&amp;rsquo;assembleur. Il en existe de nombreux et d&amp;rsquo;excellente facture sur internet. Je vais juste poser quelques rappels qui m&amp;rsquo;apparaissent essentiels pour la suite de notre voyage dans le Reverse Engineering des binaires.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>/cv/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/cv/</guid>
      <description>My name is Eric (Aka nAPTaX), i&amp;rsquo;m a french forties: üõπ SKATER, father of 4 and üßë‚Äçüåæ ETHICAL HACKER with a love for low level ‚ù§Ô∏è Reverse Engineering ‚ù§Ô∏è.
I co-founded several IT &amp;amp; Cloud companies for 20 years.
Maybe you prefer a corporate and printable CV here
Security Domains Reverse Engineering Intel/ARM Malware Analysis Ethical Hacker Security Researcher Fuzzing Skills Disassemblers Ghidra , Laid mais Efficace : Merci la NSA ;-) IDA &amp;hellip; of course ;-) IDA Python scripts for automation BINARY NINJA ‚ù§Ô∏è ‚ù§Ô∏è (my favorite one&amp;rsquo;s) with a lot of API Python NINJA BINARY ‚ù§Ô∏è ‚ù§Ô∏è RIZIN quand j&amp;rsquo;ai besoin ou envie d&amp;rsquo;une approche 100% CLI HOPPER quand je suis sous Mac Dev RIZIN Scripts Debuger and Dynamic instrumentation XDbg64 (Respect to Duncan @mrexodia) Dynamic Binary Instrumentation (DBI) avec FRIDA My swiss knife Angr Binary Emulation Dumpulator (Again respect to Duncan @mrexodia) UNICORN MANDIANT Speakeasy ‚ù§Ô∏è ‚ù§Ô∏è Langages C/C++ Deep Internal Windows Programming Python RUST And sometime NIM to dance behind EDR ;-) Frameworks i like pwntools UNICORN CAPSTONE Google oss-fuzz Threat management CVE Evaluation Framework MITRE ATT&amp;amp;CK YARA Rules SIEM searches with SIGMA Sandbox (mais pas tr√®s fan &amp;hellip;) ANY.</description>
    </item>
    
    <item>
      <title>EDITO 0x001</title>
      <link>/edito-001/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/edito-001/</guid>
      <description>Voil√† nous sommes le 26 septembre 2022, et l‚Äôh√¥pital de Corbeil-Essonnes vient de voir 11 Go de ses donn√©es publi√©es suite √† sa cyber agression par un groupe de malfrats. Ce/ces cybercriminels ont finalement mis leurs menaces √† ex√©cution sur les donn√©es qu&amp;rsquo;ils avaient chiffr√©es ET d√©rob√©es 1 mois plus t√¥t. Des Hackers ? Pas du tout : des clients &amp;hellip; Oui des clients du Ransomware As A Service (RaaS) Lockbit : quelques Bitcoins pour pouvoir disposer d&amp;rsquo;une usine de Ransomware en mode SaaS.</description>
    </item>
    
  </channel>
</rss>
