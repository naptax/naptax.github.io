<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bof on French Malware Analyst</title>
    <link>//localhost:1313/tags/bof/</link>
    <description>Recent content in bof on French Malware Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 26 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="//localhost:1313/tags/bof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[PROLOG] 0x004, Local Shellcode par Stack Buffer OverFlow (Part 2) (French version) </title>
      <link>//localhost:1313/posts/fr/2022-11-26-prolog004/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/posts/fr/2022-11-26-prolog004/</guid>
      <description>Hello,
Toujours dans cette série de billets d&amp;rsquo;échauffement (série PROLOG), nous nous étions laissés la dernière fois sur un billet expliquant ce qu&amp;rsquo;était un BUFFER OVERFLOW (le billet est ici). Je vous propose maintenant de passer à la pratique en obtenant un Shell par l&amp;rsquo;utilisation d&amp;rsquo;un STACK Buffer Overflow.
Toujours dans un souci de pédagogie, nous allons prendre un exemple simple :
Une erreur de programmation flagrante Un exécutable ne disposant d&amp;rsquo;aucun moyen de protection de sa stack Un OS pour lequel nous aurions désactivé l&amp;rsquo;ASLR qui le protège de ce type d&amp;rsquo;exploitation Une execution locale (et non remote) Un peu plus tard, nous verrons que ces moyens de protection, même activés, sont eux aussi &amp;lsquo;bypassable&amp;rsquo; &amp;hellip;</description>
    </item>
    
    <item>
      <title>[PROLOG] 0x003, Un premier Buffer Overflow (Part 1) | (French version)</title>
      <link>//localhost:1313/posts/fr/2022-10-6-prolog003/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/posts/fr/2022-10-6-prolog003/</guid>
      <description>Hello,
Comme vous avez soigneusement lu les 3 premiers billets de la série PROLOG (si celà n&amp;rsquo;est pas le cas, je vous invite vivement à les lire avant celui-ci : Assembler(1), Mémoire(2), conventions d&amp;rsquo;appels(3)) est venu le temps de les mettre en application.
Et pour un premier exercice d&amp;rsquo;application, la compréhension d&amp;rsquo;un Buffer Overflow est parfaite. A ce stade de la pédagogie, nous allons prendre un exemple fictif avec une simplicité que vous ne trouverez pas sur le théatre des opérations.</description>
    </item>
    
  </channel>
</rss>
